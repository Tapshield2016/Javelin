# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2016-04-30 00:55
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import javelin.core.aws.s3_filefield
import javelin.core.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='AgencyUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=30, unique=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.')], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, unique=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(blank=True, max_length=24, null=True)),
                ('phone_number_verification_code', models.PositiveIntegerField()),
                ('phone_number_verified', models.BooleanField(default=False)),
                ('disarm_code', models.CharField(blank=True, max_length=10, null=True)),
                ('email_verified', models.BooleanField(default=False)),
                ('device_token', models.CharField(blank=True, max_length=255, null=True)),
                ('device_endpoint_arn', models.CharField(blank=True, max_length=255, null=True)),
                ('device_type', models.CharField(blank=True, choices=[(b'I', b'iOS'), (b'A', b'Android'), (b'B', b'Blackberry'), (b'W', b'Windows')], max_length=2, null=True)),
                ('user_declined_push_notifications', models.BooleanField(default=False)),
                ('user_logged_in_via_social', models.BooleanField(default=False)),
                ('notify_entourage_on_alert', models.BooleanField(default=False)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('location_point', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326)),
                ('accuracy', models.FloatField(blank=True, null=True)),
                ('altitude', models.FloatField(blank=True, null=True)),
                ('floor_level', models.IntegerField(blank=True, null=True)),
                ('location_timestamp', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Agency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('domain', models.CharField(default=b'tapshield.com', max_length=255)),
                ('dispatcher_phone_number', models.CharField(default=b'5555555555', max_length=24)),
                ('dispatcher_secondary_phone_number', models.CharField(blank=True, default=b'555', help_text=b'Defaults to 911 within apps unless specified', max_length=24, null=True)),
                ('dispatcher_schedule_start', models.TimeField(blank=True, null=True)),
                ('dispatcher_schedule_end', models.TimeField(blank=True, null=True)),
                ('agency_boundaries', models.TextField(blank=True, help_text=b'For multiple boundaries use Regions', null=True)),
                ('agency_center_from_boundaries', models.BooleanField(default=True)),
                ('agency_center_latitude', models.FloatField(default=0)),
                ('agency_center_longitude', models.FloatField(default=0)),
                ('agency_center_point', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326)),
                ('agency_radius', models.FloatField(default=0)),
                ('default_map_zoom_level', models.PositiveIntegerField(default=15)),
                ('alert_mode_name', models.CharField(default=b'Campus Police', help_text=b"This can be changed on the wishes of the organization to be 'Police', 'Alert', etc.", max_length=24)),
                ('alert_received_message', models.CharField(default=b'The authorities have been notified.', max_length=255)),
                ('alert_completed_message', models.TextField(blank=True, default=b'Thank you for using TapShield. Your alert session was completed by dispatcher <first_name>.', null=True)),
                ('sns_primary_topic_arn', models.CharField(blank=True, max_length=255, null=True)),
                ('require_domain_emails', models.BooleanField(default=True)),
                ('display_command_alert', models.BooleanField(default=True)),
                ('loop_alert_sound', models.BooleanField(default=True)),
                ('launch_call_to_dispatcher_on_alert', models.BooleanField(default=True, help_text=b"When a mobile user begins an alert, immediately launch a VoIP call to the primary dispatcher number for the user's organization.")),
                ('show_agency_name_in_app_navbar', models.BooleanField(default=True)),
                ('enable_chat_autoresponder', models.BooleanField(default=False, help_text=b'If enabled, please set the chat autoresponder message below if you wish to respond with something that differs from the default text.', verbose_name=b'enable chat auto-responder')),
                ('chat_autoresponder_message', models.TextField(blank=True, default=b'Due to high volume, we are currently experiencing delays. Call 911 if you require immediate assistance.', null=True, verbose_name=b'chat auto-responder message')),
                ('enable_user_location_requests', models.BooleanField(default=False, help_text=b"If enabled, this allows for Shield Command dispatchers to request the latest location from users belonging to the organization. This is accomplished by sending a push notification to the organization's SNS topic to prompt devices to send a location update in the background. This does not disturb the users.")),
                ('agency_logo', models.URLField(blank=True, help_text=b'Set the location of the standard agency logo.', null=True)),
                ('agency_alternate_logo', models.URLField(blank=True, help_text=b'This could be an inverted version of the standard logo or other differently colorized/formatted version.', null=True)),
                ('agency_small_logo', models.URLField(blank=True, help_text=b"This could be a truncated or minimized form of the logo, e.g. 'UF' versus the larger logo version.", null=True)),
                ('agency_theme', models.TextField(blank=True, default=b'{}', help_text=b'Use properly formatted JSON here to provide data as necessary.', null=True)),
                ('agency_info_url', models.CharField(blank=True, help_text=b'This could be a web page with important info pertaining to emergency situations', max_length=255, null=True)),
                ('agency_rss_url', models.CharField(blank=True, help_text=b'RSS feed for mass alerts already populated by the system in use', max_length=255, null=True)),
                ('spot_crime_days_visible', models.PositiveIntegerField(default=1)),
                ('hidden', models.BooleanField(default=True, help_text=b'Hide organization from query list. Apps will no be able to add until visible')),
                ('full_version', models.BooleanField(default=True, help_text=b'When checked all services will be made available')),
                ('no_alerts', models.BooleanField(default=False, help_text=b'Auto-checked when no alert types are available for internal use')),
                ('crime_reports_available', models.BooleanField(default=True)),
                ('emergency_call_available', models.BooleanField(default=True)),
                ('alert_available', models.BooleanField(default=True)),
                ('chat_available', models.BooleanField(default=True)),
                ('yank_available', models.BooleanField(default=True)),
                ('entourage_available', models.BooleanField(default=True)),
                ('static_device_available', models.BooleanField(default=True)),
                ('mass_alert_available', models.BooleanField(default=True)),
                ('agency_point_of_contact', models.ForeignKey(blank=True, help_text=b'This will be the person with full account access.  Edit all settings, change/add payment, add/remove dispatchers, etc.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='agency_point_of_contact', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'Agencies',
            },
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('accepted_time', models.DateTimeField(blank=True, null=True)),
                ('completed_time', models.DateTimeField(blank=True, null=True)),
                ('disarmed_time', models.DateTimeField(blank=True, null=True)),
                ('pending_time', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[(b'A', b'Accepted'), (b'C', b'Completed'), (b'N', b'New'), (b'P', b'Pending'), (b'U', b'Unavailable')], default=b'N', max_length=1)),
                ('initiated_by', models.CharField(choices=[(b'N', b'911'), (b'E', b'Call'), (b'T', b'Timer'), (b'Y', b'Yank'), (b'C', b'Chat'), (b'S', b'Static')], default=b'E', max_length=2)),
                ('user_notified_of_receipt', models.BooleanField(default=False, help_text=b'Indicates if a push notification has been sent to the user to notify the app that the alert has been received.')),
                ('user_notified_of_dispatcher_congestion', models.BooleanField(default=False, help_text=b'If an organization has the chat auto-responder functionality enabled, this flag is to indicate if the user has been sent the auto-responder message.')),
                ('notes', models.TextField(blank=True, null=True)),
                ('call_length', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('in_bounds', models.BooleanField(default=True)),
                ('notified_entourage', models.BooleanField(default=False)),
                ('agency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Agency')),
                ('agency_dispatcher', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='alert_agency_dispatcher', to=settings.AUTH_USER_MODEL)),
                ('agency_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='alert_agency_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-creation_date'],
            },
        ),
        migrations.CreateModel(
            name='AlertLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('accuracy', models.FloatField(blank=True, null=True)),
                ('altitude', models.FloatField(blank=True, null=True)),
                ('floor_level', models.IntegerField(blank=True, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('alert', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='core.Alert')),
            ],
            options={
                'ordering': ['-creation_date'],
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('message', models.TextField()),
                ('message_id', models.CharField(max_length=100, unique=True)),
                ('message_sent_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('alert', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Alert')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['message_sent_time'],
            },
        ),
        migrations.CreateModel(
            name='ClosedDate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DispatchCenter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('phone_number', models.CharField(max_length=24)),
                ('agency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dispatch_center', to='core.Agency')),
            ],
        ),
        migrations.CreateModel(
            name='EntourageMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('first', models.CharField(blank=True, max_length=255, null=True)),
                ('last', models.CharField(blank=True, max_length=255, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=24, null=True)),
                ('email_address', models.EmailField(blank=True, max_length=254, null=True)),
                ('record_id', models.PositiveIntegerField(blank=True, null=True)),
                ('always_visible', models.BooleanField(default=False)),
                ('track_route', models.BooleanField(default=True)),
                ('notify_arrival', models.BooleanField(default=True)),
                ('notify_non_arrival', models.BooleanField(default=True)),
                ('notify_yank', models.BooleanField(default=True)),
                ('notify_called_911', models.BooleanField(default=False)),
                ('matched_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='existing_user', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entourage_members', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EntourageSession',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[(b'T', b'Tracking'), (b'A', b'Arrived'), (b'N', b'Non-Arrival'), (b'C', b'Cancelled'), (b'U', b'Unknown')], default=b'T', max_length=1)),
                ('travel_mode', models.CharField(choices=[(b'D', b'Driving'), (b'W', b'Walking'), (b'B', b'Bicycling'), (b'T', b'Transit'), (b'U', b'Unknown')], default=b'U', max_length=1)),
                ('eta', models.DateTimeField(blank=True, null=True)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('arrival_time', models.DateTimeField(blank=True, null=True)),
                ('entourage_notified', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['-creation_date'],
            },
        ),
        migrations.CreateModel(
            name='MassAlert',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('message', models.TextField()),
                ('type', models.CharField(blank=True, choices=[(b'AB', b'Abuse'), (b'AR', b'Arrest'), (b'AN', b'Arson'), (b'AS', b'Assault'), (b'BU', b'Burglary'), (b'CA', b'Car Accident'), (b'DI', b'Disturbance'), (b'DR', b'Drugs/Alcohol'), (b'H', b'Harassment'), (b'MH', b'Mental Health'), (b'O', b'Other'), (b'R', b'Robbery'), (b'SH', b'Shooting'), (b'S', b'Suggestion'), (b'SA', b'Suspicious Activity'), (b'T', b'Theft'), (b'V', b'Vandalism')], max_length=2, null=True)),
                ('agency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Agency')),
                ('agency_dispatcher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-creation_date'],
            },
        ),
        migrations.CreateModel(
            name='NamedLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('formatted_address', models.CharField(blank=True, max_length=255, null=True)),
                ('street', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('state', models.CharField(blank=True, max_length=255, null=True)),
                ('zip', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['-creation_date'],
            },
        ),
        migrations.CreateModel(
            name='Period',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.CharField(choices=[(b'1', b'Sunday'), (b'2', b'Monday'), (b'3', b'Tuesday'), (b'4', b'Wednesday'), (b'5', b'Thursday'), (b'6', b'Friday'), (b'7', b'Saturday')], default=b'1', max_length=1)),
                ('open', models.TimeField(blank=True, null=True)),
                ('close', models.TimeField(blank=True, null=True)),
                ('dispatch_center', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='opening_hours', to='core.DispatchCenter')),
            ],
            options={
                'ordering': ['day'],
                'verbose_name': 'Period',
                'verbose_name_plural': 'Opening Hours',
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('boundaries', models.TextField(blank=True, null=True)),
                ('center_latitude', models.FloatField()),
                ('center_longitude', models.FloatField()),
                ('center_point', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326)),
                ('radius', models.FloatField(default=0)),
                ('agency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='region', to='core.Agency')),
                ('fallback_dispatch_center', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fallback_dispatch_center', to='core.DispatchCenter')),
                ('primary_dispatch_center', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='primary_dispatch_center', to='core.DispatchCenter')),
                ('secondary_dispatch_center', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='secondary_dispatch_center', to='core.DispatchCenter')),
            ],
        ),
        migrations.CreateModel(
            name='SocialCrimeReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('body', models.TextField()),
                ('report_type', models.CharField(choices=[(b'AB', b'Abuse'), (b'AS', b'Assault'), (b'CA', b'Car Accident'), (b'DI', b'Disturbance'), (b'DR', b'Drugs/Alcohol'), (b'H', b'Harassment'), (b'MH', b'Mental Health'), (b'O', b'Other'), (b'RN', b'Repair Needed'), (b'S', b'Suggestion'), (b'SA', b'Suspicious Activity'), (b'T', b'Theft'), (b'V', b'Vandalism')], max_length=2)),
                ('report_audio_url', javelin.core.aws.s3_filefield.S3URLField(blank=True, help_text=b'Location of asset on S3', null=True)),
                ('report_image_url', javelin.core.aws.s3_filefield.S3URLField(blank=True, help_text=b'Location of asset on S3', null=True)),
                ('report_video_url', javelin.core.aws.s3_filefield.S3URLField(blank=True, help_text=b'Location of asset on S3', null=True)),
                ('report_latitude', models.FloatField()),
                ('report_longitude', models.FloatField()),
                ('report_point', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326)),
                ('report_anonymous', models.BooleanField(default=False)),
                ('flagged_spam', models.BooleanField(default=False)),
                ('viewed_time', models.DateTimeField(blank=True, null=True)),
                ('flagged_by_dispatcher', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='flagged_by_dispatcher', to=settings.AUTH_USER_MODEL)),
                ('reporter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reporter', to=settings.AUTH_USER_MODEL)),
                ('viewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='viewed_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StaticDevice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.SlugField(help_text=b'Unique identifier (e.g. serial number)', max_length=255, unique=True)),
                ('type', models.CharField(blank=True, default=b'Emergency Phone', help_text=b'Model number or device type', max_length=255, null=True)),
                ('description', models.CharField(blank=True, help_text=b'(Auto-set if left empty by lat & lon Google Maps geocoder) Human readable identifier denoting location (e.g. building, street, landmark, etc.)', max_length=255, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('location_point', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text=b'(Auto-set by lat & lon) Coordinate point used by geoDjango for queryingNote: The lat & lon is reversed to conform to a coordinate plane', null=True, srid=4326)),
                ('agency', models.ForeignKey(blank=True, help_text=b'(Auto-set if left empty by lat & lon to nearest within 10 miles) Who should receive the alert?', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='StaticDevice', to='core.Agency')),
                ('user', models.ForeignKey(blank=True, help_text=b'Will be used in the future to limit edit/updated permissions to a particular authorization token', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='User', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Theme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('primary_color', models.CharField(blank=True, help_text=b"Primary color of an organization's logo or color scheme", max_length=8, null=True)),
                ('secondary_color', models.CharField(blank=True, help_text=b"Secondary color of an organization's logo or color scheme", max_length=8, null=True)),
                ('alternate_color', models.CharField(blank=True, help_text=b'Alternate color, maybe something neutral such as white', max_length=8, null=True)),
                ('small_logo', javelin.core.aws.s3_filefield.S3EnabledImageField(blank=True, help_text=b"Truncated or minimized form of the logo, e.g. 'UF' versus the larger logo version for organization lists.", null=True, upload_to=javelin.core.models.file_path)),
                ('navbar_logo', javelin.core.aws.s3_filefield.S3EnabledImageField(blank=True, help_text=b'For light background on home screen', null=True, upload_to=javelin.core.models.file_path)),
                ('navbar_logo_alternate', javelin.core.aws.s3_filefield.S3EnabledImageField(blank=True, help_text=b'For dark background on alert screen', null=True, upload_to=javelin.core.models.file_path)),
                ('map_overlay_logo', javelin.core.aws.s3_filefield.S3EnabledImageField(blank=True, help_text=b'Large logo for overlaying on map geofence', null=True, upload_to=javelin.core.models.file_path)),
                ('shield_command_logo', javelin.core.aws.s3_filefield.S3EnabledImageField(blank=True, help_text=b'Logo re-sized for Shield Command. 10% top and bottom padding recommended', null=True, upload_to=javelin.core.models.file_path)),
            ],
        ),
        migrations.CreateModel(
            name='TrackingLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('accuracy', models.FloatField(blank=True, null=True)),
                ('altitude', models.FloatField(blank=True, null=True)),
                ('entourage_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='core.EntourageSession')),
            ],
            options={
                'ordering': ['creation_date'],
            },
        ),
        migrations.CreateModel(
            name='UserNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('type', models.CharField(choices=[(b'E', b'Entourage'), (b'C', b'Crime Report'), (b'O', b'Other')], default=b'O', max_length=1)),
                ('read', models.BooleanField(default=False)),
                ('object_id', models.PositiveIntegerField(null=True)),
                ('content_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-creation_date'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('birthday', models.DateField(blank=True, null=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('hair_color', models.CharField(blank=True, choices=[(b'Y', b'Blonde'), (b'BR', b'Brown'), (b'BL', b'Black'), (b'R', b'Red'), (b'BA', b'Bald'), (b'GR', b'Gray'), (b'O', b'Other')], max_length=2, null=True)),
                ('gender', models.CharField(blank=True, choices=[(b'M', b'Male'), (b'F', b'Female')], max_length=1, null=True)),
                ('race', models.CharField(blank=True, choices=[(b'BA', b'Black/African Descent'), (b'WC', b'White/Caucasian'), (b'EI', b'East Indian'), (b'AS', b'Asian'), (b'LH', b'Latino/Hispanic'), (b'ME', b'Middle Eastern'), (b'PI', b'Pacific Islander'), (b'NA', b'Native American'), (b'O', b'Other')], max_length=3, null=True)),
                ('height', models.CharField(blank=True, max_length=10, null=True)),
                ('weight', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('known_allergies', models.TextField(blank=True, null=True)),
                ('medications', models.TextField(blank=True, null=True)),
                ('emergency_contact_first_name', models.CharField(blank=True, max_length=30, null=True)),
                ('emergency_contact_last_name', models.CharField(blank=True, max_length=30, null=True)),
                ('emergency_contact_phone_number', models.CharField(blank=True, max_length=24, null=True)),
                ('emergency_contact_relationship', models.CharField(blank=True, choices=[(b'F', b'Father'), (b'M', b'Mother'), (b'S', b'Spouse'), (b'BF', b'Boyfriend'), (b'GF', b'Girlfriend'), (b'B', b'Brother'), (b'SI', b'Sister'), (b'FR', b'Friend'), (b'O', b'Other')], max_length=2, null=True)),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to=b'images/profiles')),
                ('profile_image_url', javelin.core.aws.s3_filefield.S3URLField(blank=True, help_text=b'Location of asset on S3', null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, unique=True)),
            ],
        ),
        migrations.AddField(
            model_name='entouragesession',
            name='end_location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ending_locations', to='core.NamedLocation'),
        ),
        migrations.AddField(
            model_name='entouragesession',
            name='start_location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='starting_locations', to='core.NamedLocation'),
        ),
        migrations.AddField(
            model_name='entouragesession',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='session_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='closeddate',
            name='dispatch_center',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='closed_date', to='core.DispatchCenter'),
        ),
        migrations.AddField(
            model_name='alert',
            name='static_device',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='static_device', to='core.StaticDevice'),
        ),
        migrations.AddField(
            model_name='agency',
            name='branding',
            field=models.ForeignKey(blank=True, help_text=b'Internal UI elements for OEM partners', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='branding_theme', to='core.Theme'),
        ),
        migrations.AddField(
            model_name='agency',
            name='theme',
            field=models.ForeignKey(blank=True, help_text=b'UI elements related to agency', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='agency_theme', to='core.Theme'),
        ),
        migrations.AddField(
            model_name='agencyuser',
            name='agency',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.Agency'),
        ),
        migrations.AddField(
            model_name='agencyuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='agencyuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
